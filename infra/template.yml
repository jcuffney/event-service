AWSTemplateFormatVersion: '2010-09-09'

Parameters:

  Project:
    Type: String
    Default: "cuffney"
    Description: "Project name"

  Branch:
    Type: String
    Default: "main"
    Description: "Branch name"

  Service:
    Type: String
    Default: "event-service"
    Description: "Service name"

  SourceBucketArn:
    Type: String
    Description: "ARN of the S3 bucket containing the Lambda deployment package"

Resources:

  EventServiceOnEventLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${Project}-${Branch}-${Service}-lambda-role"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: "CloudWatchLogsFullAccess"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "arn:aws:logs:*:*:*"

  EventServiceOnEventLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${Project}-${Branch}-${Service}-onEvent"
      Handler: "bootstrap"  # Assuming the Rust Lambda handler is named "bootstrap" after compilation
      Runtime: provided.al2  # Use custom runtime for Rust
      Code:
        S3Bucket: !Ref SourceBucketArn
        S3Key: "cuffney-main-event-service-onEvent.zip"
      Role: !GetAtt EventServiceOnEventLambdaExecutionRole.Arn
      MemorySize: 128
      Timeout: 6
